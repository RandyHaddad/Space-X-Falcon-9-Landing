import pandas as pd
import dash
import dash_html_components as html
import dash_core_components as dcc
from dash.dependencies import Input, Output
import plotly.express as px

spacex_df = pd.read_csv("spacex_launch_dash.csv")
max_payload = spacex_df['Payload Mass (kg)'].max()
min_payload = spacex_df['Payload Mass (kg)'].min()


app = dash.Dash(__name__)


app.layout = html.Div(children=[html.H1('SpaceX Launch Records Dashboard',
                                        style={'textAlign': 'center', 'color': '#503D36',
                                               'font-size': 40}),

                                html.Br(),
                            dcc.Dropdown(id = 'site-dropdown',
                                options=[
                                         {'label': 'All Sites', 'value': 'ALL'},
                                         {'label': 'CCAFS LC-40', 'value': 'CCAFS LC-40'},
                                         {'label': 'VAFB SLC-4E', 'value': 'VAFB SLC-4E'},
                                         {'label': 'KSC LC-39A', 'value': 'KSC LC-39A'},
                                         {'label': 'CCAFS SLC-40', 'value': 'CCAFS SLC-40'}
                                     ],
                                value='ALL',
                                placeholder='Select a Launch Site',
                                searchable=True),
                            
                                
                            html.Div(dcc.Graph(id='success-pie-chart')),
                            html.Br(),
                            html.P("Payload range (Kg):"),
                                
                            dcc.RangeSlider(id='payload-slider',
                             min = 0,
                             max = 10000,
                             step = 1000,
                             marks = {0 : '0', 100: '100'},
                             value = [min_payload, max_payload]),

                            html.Div(dcc.Graph(id='success-payload-scatter-chart')),
                            ])
  
@app.callback(
    Output(component_id='success-pie-chart', component_property='figure'), 
    Input(component_id='site-dropdown', component_property='value'))
def update_pie_chart(value):
     site = value
     if site == 'ALL':
        fig = px.pie(spacex_df, values = 'class', names='Launch Site', title='Success Launches for all sites')
        return fig
     else:
         filtered_df = spacex_df[spacex_df['Launch Site'] == site]
         filtered_df = filtered_df.groupby(['Launch Site','class']).size().reset_index(name='class count')
         fig = px.pie(filtered_df, values='class count', names='class', title=f"Total Success Launches for site {site}")
         return fig

@app.callback(
    Output(component_id='success-payload-scatter-chart', component_property='figure'), 
    [Input(component_id='site-dropdown', component_property='value'), Input(component_id="payload-slider", component_property="value")])
def update_scattergraph(site_dropdown,payload_slider):
    if (site_dropdown == 'All Sites' or site_dropdown == 'None'):
        low, high = payload_slider
        all_sites  = spacex_df
        inrange = (all_sites['Payload Mass (kg)'] > low) & (all_sites['Payload Mass (kg)'] < high)
        fig = px.scatter(
                all_sites[inrange], 
                x = "Payload Mass (kg)", 
                y = "class",
                title = 'Correlation Between Payload and Success for All Sites',
                color="Booster Version Category",
                size='Payload Mass (kg)',
                hover_data=['Payload Mass (kg)']
            )
    else:
        low, high = payload_slider
        site_specific  = spacex_df.loc[spacex_df['Launch Site'] == site_dropdown]
        inrange = (site_specific['Payload Mass (kg)'] > low) & (site_specific['Payload Mass (kg)'] < high)
        fig = px.scatter(
                site_specific[inrange],
                x = "Payload Mass (kg)",
                y = "class",
                title = 'Correlation Between Payload and Success for Site &#8608; '+site_dropdown,
                color="Booster Version Category",
                size='Payload Mass (kg)',
                hover_data=['Payload Mass (kg)']
            )
    return fig

if __name__ == '__main__':
    app.run_server()

##Dashboard link : https://randyelhadda-8050.theiadocker-1-labs-prod-theiak8s-4-tor01.proxy.cognitiveclass.ai/
